#region VEXcode Generated Robot Configuration
from vex import *

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
FrontLeft = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)
FrontRight = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)
BackLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
BackRight = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)
Lift1 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
Lift2 = Motor(Ports.PORT14, GearSetting.RATIO_18_1, False)
Clamp = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)






#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
#	Author:       VEX
#	Created:
#	Description:  VEXcode V5 Python Project
# 
# ------------------------------------------

# Library imports
from vex import *
import math


# Begin project code
spd_mod = 1
Lift1.set_velocity(40, PERCENT)
Lift1.set_stopping(HOLD)
Lift2.set_velocity(40, PERCENT)
Lift2.set_stopping(HOLD)
Clamp1.set_velocity(100, PERCENT)
Clamp1.set_stopping(HOLD)
Clamp2.set_velocity(100, PERCENT)
Clamp2.set_stopping(HOLD)
wheels = [BackLeft,  FrontLeft, BackRight, FrontRight]
for i in wheels:
    i.set_stopping(HOLD)

### Autonomous ###

def autonomous():
    # pass
    # leftAutonomous()
    # rightAutonomous()
    testLeftAutonomous()
    testRightAutonomous()
    
def testLeftAutonomous(): # Left autonomous
    testMove(2)
    testClamp(True, True)
    testMove(2, False)
    testForklift(True)
    testRotate(90, False)
    testMove(1, False)
    testClamp(True, False)
    testMove(1)
    testRotate(90, True)

def testRightAutonomous(): #Right autonomous
    testMove(2)
    testClamp(True, True)
    testRotate(170, True)
    testMove(1, False)
    testClamp(True, False)
    testMove(1)
    testRotate(170, False)
    testMove(2)

def testMove(secs, forwards=True):
    for i in wheels:
        i.set_velocity(50, PERCENT)
    if forwards:
        BackLeft.spin(FORWARD)
        BackRight.spin(REVERSE)
        FrontLeft.spin(FORWARD)
        FrontRight.spin(REVERSE)
    else:
        BackLeft.spin(REVERSE)
        BackRight.spin(FORWARD)
        FrontLeft.spin(REVERSE)
        FrontRight.spin(FORWARD)
    wait(secs, SECONDS)
    BackLeft.stop()
    BackRight.stop()
    FrontLeft.stop()
    FrontRight.stop()
    
def testRotate(degrees, clockwise):
    for i in wheels:
        i.set_velocity(50, PERCENT)
    if clockwise:
        BackLeft.spin(FORWARD)
        BackRight.spin(FORWARD)
        FrontLeft.spin(FORWARD)
        FrontRight.spin(FORWARD)
    else:
        BackLeft.spin(REVERSE)
        BackRight.spin(REVERSE)
        FrontLeft.spin(REVERSE)
        FrontRight.spin(REVERSE)
    wait((degrees / 195), SECONDS)
    BackLeft.stop()
    BackRight.stop()
    FrontLeft.stop()
    FrontRight.stop()

def testForklift(up):
    Lift1.set_velocity(70, PERCENT)
    Lift2.set_velocity(70, PERCENT)
    if up:
        Lift1.spin(REVERSE)
        Lift2.spin(FORWARD)
    else:
        Lift1.spin(FORWARD)
        Lift2.spin(REVERSE)
    wait(2, SECONDS)
    Lift1.stop()
    Lift2.stop()

def testClamp(up, forklift):
    if forklift:
        if up:
            Clamp1.spin(REVERSE)
        else:
            Clamp1.spin(FORWARD)
        wait(1, SECONDS)
        Clamp1.stop()
    else:
        if up:
            Clamp2.spin(REVERSE)
        else:
            Clamp2.spin(FORWARD)
        wait(1, SECONDS)
        Clamp2.stop()


### Left Autonomous ###

def leftAutonomous():
    down = True
    up = False
    autonomousRotate(10/360, 100, True)
    autonomousLift(down, 10, False)
    autonomousMove(2, "u", 90, True)
    autonomousClamp(down, 180, True)
    autonomousLift(up, 10, False)
    autonomousRotate(10/360, -100, True)
    autonomousMove(2, "d", 90, True)
    autonomousRotate(0.5, -100, True)
    autonomousLift(down, 10, True)
    autonomousClamp(up, 50, True)
    #open the clamp

### Right Autonomous ###

def rightAutonomous():
    down = True
    up = False
    autonomousMove(2, "u", 90, True)
    #stop and close the clamp
    autonomousLift(up, 30, False)
    autonomousMove(2, "d", 90, False)
    autonomousRotate(0.5, -100, True)
    autonomousLift(down, 30, True)
    #stop and open the clamp
    autonomousRotate(0.75, 100, False)
    autonomousMove(1.5, "u", 90, True)
    #stop and close clamp
    autonomousLift(up, 30, False)
    autonomousMove(1.5, "d", 90, True)
    autonomousLift(down, 30, True)
    #stop and open clamp

def autonomousLift(goDown, deg, halt):
    ratio = 7
    if goDown:
        Lift1.spin_for(FORWARD, deg*ratio, DEGREES, wait=False)
        Lift2.spin_for(REVERSE, deg*ratio, DEGREES, wait=halt)
    else:
        Lift1.spin_for(REVERSE, deg*ratio, DEGREES, wait=False)
        Lift2.spin_for(FORWARD, deg*ratio, DEGREES, wait=halt)

def autonomousClamp(goDown, deg, halt):
    ratio = 5
    if goDown == False:
        Clamp1.spin_for(REVERSE, deg*ratio, DEGREES, wait=halt)
    else:
        Clamp1.spin_for(FORWARD, deg*ratio, DEGREES, wait=halt)

def autonomousRotate(secs, velo, halt):
    turn_constant = 1
    global wheels
    for i in wheels:
        i.set_velocity(velo, PERCENT)
    for i in wheels:
        i.spin(FORWARD)
    wait(secs, SECONDS)
    if halt == True:
        for i in wheels:
            i.stop()
    
def autonomousMove(secs, direction, velo, halt):
    global wheels
    if direction == "u":
        UD = velo
        RL = 0
    elif direction == "ur":
        UD = math.sin(45)*velo
        RL = math.sin(45)*velo
    elif direction == "r":
        UD = 0
        RL = velo
    elif direction == "dr":
        UD = -1*math.sin(45)*velo
        RL = math.sin(45)*velo
    elif direction == "d":
        UD = -1*velo
        RL = 0
    elif direction == "dl":
        UD = -1*math.sin(45)*velo
        RL = -1*math.sin(45)*velo
    elif direction == "l":
        UD = 0
        RL = -1*velo
    elif direction == "ul":
        UD = math.sin(45)*velo
        RL = -1*math.sin(45)*velo

    upRight, upLeft = getMoveVectors(RL, UD)
    rotate_spd = 0
    wheel_speeds = getMovement(upRight, upLeft, rotate_spd)
    for i in range(len(wheel_speeds)):
        wheel_speeds[i] = (wheel_speeds[i] / 71) * 100
        if wheel_speeds[i] > 100:
            wheel_speeds[i] = 100
        elif wheel_speeds[i] < -100:
            wheel_speeds[i] = -100
    for i in range(4):
        wheels[i].set_velocity(wheel_speeds[i], PERCENT)
    for i in wheels:
        i.spin(FORWARD)
    wait(secs, SECONDS)
    if halt == True:
        for i in wheels:
            i.stop()


def rotate():
    global spd_mod
    rightJoyRL = controller_1.axis1.position()
    spd = rightJoyRL*spd_mod
    return spd

def translate():
    global spd_mod
    leftJoyRL = controller_1.axis4.position()
    leftJoyUD = controller_1.axis3.position()
    upRight, upLeft = getMoveVectors(leftJoyRL, leftJoyUD)
    upRight = upRight*spd_mod
    upLeft = upLeft*spd_mod
    return upRight, upLeft

def calculateDeadzones(leftJoyRL, leftJoyUD):
    deadzone_angle = 10
    if leftJoyRL != leftJoyUD:
        inputs = [abs(leftJoyRL), abs(leftJoyUD)]
        input_angle = math.atan(min(inputs)/max(inputs))
        if deadzone_angle > input_angle:
            if inputs.index(max(inputs)) == 0:
                leftJoyUD = 0
            else:
                leftJoyRL = 0                
    return leftJoyRL, leftJoyUD

def getMoveVectors(leftJoyRL, leftJoyUD):
    x_axis = math.sqrt((leftJoyRL**2)/2)
    y_axis = math.sqrt((leftJoyUD**2)/2)
    if leftJoyRL >= 0 and leftJoyUD >= 0:
        upRight = x_axis + y_axis
        upLeft = y_axis - x_axis
    elif leftJoyRL <= 0 and leftJoyUD >= 0:
        upRight = y_axis - x_axis
        upLeft = y_axis + x_axis
    elif leftJoyRL <= 0 and leftJoyUD <= 0:
        upRight = 0 - x_axis - y_axis
        upLeft = x_axis - y_axis
    elif leftJoyRL >= 0 and leftJoyUD <= 0:
        upRight = x_axis - y_axis
        upLeft = 0 - y_axis - x_axis    
    return upRight, upLeft

def move():
    FrontLeft.set_stopping(HOLD)
    FrontRight.set_stopping(HOLD)
    BackLeft.set_stopping(HOLD)
    BackRight.set_stopping(HOLD)
    upRight, upLeft = translate()
    rotate_spd = rotate()
    wheel_speeds = getMovement(upRight, upLeft, rotate_spd)
    all_stopped = False
    for i in wheel_speeds:
        if i < 1 and i > -1:
            all_stopped = True
    for i in range(len(wheel_speeds)):
        wheel_speeds[i] = (wheel_speeds[i] / 71) * 100
        if wheel_speeds[i] > 100:
            wheel_speeds[i] = 100
        if wheel_speeds[i] < -100:
            wheel_speeds[i] = -100
    if all_stopped == False:
        for i in range(4):
            wheels[i].set_velocity(wheel_speeds[i], PERCENT)
        for i in wheels:
            i.spin(FORWARD)
    else:
        FrontLeft.stop()
        FrontRight.stop()
        BackLeft.stop()
        BackRight.stop()
        for i in wheels:
            i.stop()

def liftDown():
    Lift1.spin(FORWARD)
    Lift2.spin(REVERSE)

def liftStop():
    Lift1.stop()
    Lift2.stop()

def liftUp():
    Lift1.spin(REVERSE) 
    Lift2.spin(FORWARD)

def getMovement(upRight, upLeft, rotate_spd):
    bl = upLeft + rotate_spd
    fl = upRight + rotate_spd
    br = rotate_spd - upRight
    fr = rotate_spd - upLeft
    wheel_speeds = [bl, fl ,br, fr]
    return wheel_speeds

def slowToggle():
    global spd_mod
    if spd_mod == 1:
        spd_mod = 0.3
    else:
        spd_mod = 1

def clamp1Down():
    Clamp1.spin(FORWARD)

def clamp1Up():
    Clamp1.spin(REVERSE)

def clamp1Stop():
    Clamp1.stop()

def clamp2Down():
    Clamp2.spin(FORWARD)

def clamp2Up():
    Clamp2.spin(REVERSE)

def clamp2Stop():
    Clamp2.stop()

# def l2Relesed():
#     global spd_mod
#     spd_mod = 1
#     move()

def driver_control():
    controller_1.axis1.changed(move)
    controller_1.axis3.changed(move)
    controller_1.axis4.changed(move)
    controller_1.buttonL1.pressed(slowToggle)
    controller_1.buttonR1.pressed(liftUp)
    controller_1.buttonR2.pressed(liftDown)
    controller_1.buttonR1.released(liftStop)
    controller_1.buttonR2.released(liftStop)
    controller_1.buttonDown.pressed(clamp1Down)
    controller_1.buttonUp.pressed(clamp1Up)
    controller_1.buttonDown.released(clamp1Stop)
    controller_1.buttonUp.released(clamp1Stop)
    controller_1.buttonLeft.pressed(clamp2Up)
    controller_1.buttonRight.pressed(clamp2Down)
    controller_1.buttonLeft.released(clamp2Stop)
    controller_1.buttonRight.released(clamp2Stop)
    
competition = Competition(driver_control, autonomous)
