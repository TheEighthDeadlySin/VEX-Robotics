{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nFrontLeft = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nFrontRight = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nBackLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nBackRight = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nLift1 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nLift2 = Motor(Ports.PORT14, GearSetting.RATIO_18_1, False)\nClamp = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n\n\n# Begin project code\nspd_mod = 1\nLift1.set_velocity(40, PERCENT)\nLift1.set_stopping(HOLD)\nLift2.set_velocity(40, PERCENT)\nLift2.set_stopping(HOLD)\nClamp.set_velocity(100, PERCENT)\nClamp.set_stopping(HOLD)\nwheels = [BackLeft,  FrontLeft, BackRight, FrontRight]\nfor i in wheels:\n    i.set_stopping(HOLD)\n\n### Null Autonomous ###\n\ndef autonomous():\n    pass\n\n### Left Autonomous ###\n\n# def autonomous():\n#     down = True\n#     up = False\n#     autonomousRotate(10/360, 100, True)\n#     autonomousLift(down, 10, False)\n#     autonomousMove(2, \"u\", 90, True)\n#     autonomousClamp(down, 180, True)\n#     autonomousLift(up, 10, False)\n#     autonomousRotate(10/360, -100, True)\n#     autonomousMove(2, \"d\", 90, True)\n#     autonomousRotate(0.5, -100, True)\n#     autonomousLift(down, 10, True)\n#     autonomousClamp(up, 50, True)\n#     #open the clamp\n\n### Right Autonomous ###\n\n# def autonomous():\n#     down = True\n#     up = False\n#     autonomousMove(2, \"u\", 90, True)\n#     #stop and close the clamp\n#     autonomousLift(up, 30, False)\n#     autonomousMove(2, \"d\", 90, False)\n#     autonomousRotate(0.5, -100, True)\n#     autonomousLift(down, 30, True)\n#     #stop and open the clamp\n#     autonomousRotate(0.75, 100, False)\n#     autonomousMove(1.5, \"u\", True)\n#     #stop and close clamp\n#     autonomousLift(up, 30, False)\n#     autonomousMove(1.5, \"d\", True)\n#     autonomousLift(down, 30, True)\n#     #stop and open clamp\n\ndef autonomousLift(goDown, deg, halt):\n    ratio = 7\n    if goDown:\n        Lift1.spin_for(FORWARD, deg*ratio, DEGREES, wait=False)\n        Lift2.spin_for(REVERSE, deg*ratio, DEGREES, wait=halt)\n    else:\n        Lift1.spin_for(REVERSE, deg*ratio, DEGREES, wait=False)\n        Lift2.spin_for(FORWARD, deg*ratio, DEGREES, wait=halt)\n\ndef autonomousClamp(goDown, deg, halt):\n    ratio = 5\n    if goDown == False:\n        Clamp.spin_for(REVERSE, deg*ratio, DEGREES, wait=halt)\n    else:\n        Clamp.spin_for(FORWARD, deg*ratio, DEGREES, wait=halt)\n\ndef autonomousRotate(secs, velo, halt):\n    turn_constant = 1\n    global wheels\n    for i in wheels:\n        i.set_velocity(velo, PERCENT)\n    for i in wheels:\n        i.spin(FORWARD)\n    wait(secs, SECONDS)\n    if halt == True:\n        for i in wheels:\n            i.stop()\n\ndef autonomousMove(secs, direction, velo, halt):\n    global wheels\n    if direction == \"u\":\n        UD = velo\n        RL = 0\n    elif direction == \"ur\":\n        UD = math.sin(45)*velo\n        RL = math.sin(45)*velo\n    elif direction == \"r\":\n        UD = 0\n        RL = velo\n    elif direction == \"dr\":\n        UD = -1*math.sin(45)*velo\n        RL = math.sin(45)*velo\n    elif direction == \"d\":\n        UD = -1*velo\n        RL = 0\n    elif direction == \"dl\":\n        UD = -1*math.sin(45)*velo\n        RL = -1*math.sin(45)*velo\n    elif direction == \"l\":\n        UD = 0\n        RL = -1*velo\n    elif direction == \"ul\":\n        UD = math.sin(45)*velo\n        RL = -1*math.sin(45)*velo\n\n    upRight, upLeft = getMoveVectors(RL, UD)\n    rotate_spd = 0\n    wheel_speeds = getMovement(upRight, upLeft, rotate_spd)\n    for i in range(len(wheel_speeds)):\n        wheel_speeds[i] = (wheel_speeds[i] / 71) * 100\n        if wheel_speeds[i] > 100:\n            wheel_speeds[i] = 100\n        elif wheel_speeds[i] < -100:\n            wheel_speeds[i] = -100\n    for i in wheels:\n        i.spin(FORWARD)\n    for i in range(4):\n        wheels[i].set_velocity(wheel_speeds[i], PERCENT)\n    wait(secs, SECONDS)\n    if halt == True:\n        for i in wheels:\n            i.stop()\n\n\ndef rotate():\n    global spd_mod\n    rightJoyRL = controller_1.axis1.position()\n    spd = rightJoyRL*spd_mod\n    return spd\n\ndef translate():\n    global spd_mod\n    leftJoyRL = controller_1.axis4.position()\n    leftJoyUD = controller_1.axis3.position()\n    upRight, upLeft = getMoveVectors(leftJoyRL, leftJoyUD)\n    upRight = upRight*spd_mod\n    upLeft = upLeft*spd_mod\n    return upRight, upLeft\n\ndef calculateDeadzones(leftJoyRL, leftJoyUD):\n    deadzone_angle = 10\n    if leftJoyRL != leftJoyUD:\n        inputs = [abs(leftJoyRL), abs(leftJoyUD)]\n        input_angle = math.atan(min(inputs)/max(inputs))\n        if deadzone_angle > input_angle:\n            if inputs.index(max(inputs)) == 0:\n                leftJoyUD = 0\n            else:\n                leftJoyRL = 0                \n    return leftJoyRL, leftJoyUD\n\ndef getMoveVectors(leftJoyRL, leftJoyUD):\n    x_axis = math.sqrt((leftJoyRL**2)/2)\n    y_axis = math.sqrt((leftJoyUD**2)/2)\n    if leftJoyRL >= 0 and leftJoyUD >= 0:\n        upRight = x_axis + y_axis\n        upLeft = y_axis - x_axis\n    elif leftJoyRL <= 0 and leftJoyUD >= 0:\n        upRight = y_axis - x_axis\n        upLeft = y_axis + x_axis\n    elif leftJoyRL <= 0 and leftJoyUD <= 0:\n        upRight = 0 - x_axis - y_axis\n        upLeft = x_axis - y_axis\n    elif leftJoyRL >= 0 and leftJoyUD <= 0:\n        upRight = x_axis - y_axis\n        upLeft = 0 - y_axis - x_axis    \n    return upRight, upLeft\n\ndef move():\n    FrontLeft.set_stopping(HOLD)\n    FrontRight.set_stopping(HOLD)\n    BackLeft.set_stopping(HOLD)\n    BackRight.set_stopping(HOLD)\n    upRight, upLeft = translate()\n    rotate_spd = rotate()\n    wheel_speeds = getMovement(upRight, upLeft, rotate_spd)\n    all_stopped = False\n    for i in wheel_speeds:\n        if i < 1 and i > -1:\n            all_stopped = True\n    for i in range(len(wheel_speeds)):\n        wheel_speeds[i] = (wheel_speeds[i] / 71) * 100\n        if wheel_speeds[i] > 100:\n            wheel_speeds[i] = 100\n        if wheel_speeds[i] < -100:\n            wheel_speeds[i] = -100\n    if all_stopped == False:\n        for i in range(4):\n            wheels[i].set_velocity(wheel_speeds[i], PERCENT)\n        for i in wheels:\n            i.spin(FORWARD)\n    else:\n        FrontLeft.stop()\n        FrontRight.stop()\n        BackLeft.stop()\n        BackRight.stop()\n        for i in wheels:\n            i.stop()\n\ndef liftDown():\n    Lift1.spin(FORWARD)\n    Lift2.spin(REVERSE)\n\ndef liftStop():\n    Lift1.stop()\n    Lift2.stop()\n\ndef liftUp():\n    Lift1.spin(REVERSE) \n    Lift2.spin(FORWARD)\n\ndef getMovement(upRight, upLeft, rotate_spd):\n    bl = upLeft + rotate_spd\n    fl = upRight + rotate_spd\n    br = rotate_spd - upRight\n    fr = rotate_spd - upLeft\n    wheel_speeds = [bl, fl ,br, fr]\n    return wheel_speeds\n\ndef slowToggle():\n    global spd_mod\n    if spd_mod == 1:\n        spd_mod = 0.3\n    else:\n        spd_mod = 1\n\ndef clampDown():\n    Clamp.spin(FORWARD)\n\ndef clampStop():\n    Clamp.stop()\n\ndef clampUp():\n    Clamp.spin(REVERSE)\n\n# def l2Relesed():\n#     global spd_mod\n#     spd_mod = 1\n#     move()\n\ndef driver_control():\n    controller_1.axis1.changed(move)\n    controller_1.axis3.changed(move)\n    controller_1.axis4.changed(move)\n    controller_1.buttonL1.pressed(slowToggle)\n    controller_1.buttonR1.pressed(liftUp)\n    controller_1.buttonR2.pressed(liftDown)\n    controller_1.buttonR1.released(liftStop)\n    controller_1.buttonR2.released(liftStop)\n    controller_1.buttonDown.pressed(clampDown)\n    controller_1.buttonUp.pressed(clampUp)\n    controller_1.buttonDown.released(clampStop)\n    controller_1.buttonUp.released(clampStop)\n    \ncompetition = Competition(driver_control, autonomous)\n\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"FrontLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"FrontRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"BackLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"BackRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[12],"name":"Lift1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[14],"name":"Lift2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[13],"name":"Clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}